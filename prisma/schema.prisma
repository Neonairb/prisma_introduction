// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  age              Int
  name             String?
  email            String          @unique
  role             Role            @default(BASIC)
  writtenPost      Post[]          @relation("WrittenPosts")
  favoritePost     Post[]          @relation("FavoritedPosts")
  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique

  // Blocklevel attributes
  // Este hace que no puede haver dos usuarios con el mismo nombre y edad
  @@unique([name, age])
  // Este sirve para indexar los email para hacer busquedas mas rapidas
  @@index([email])
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?
}

model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  // Siempre asignara la fecha actual al campo createdAt
  createdAt     DateTime   @default(now())
  // Siempre reasignara la fecha actual al campo updatedAt cuando se haga un cambio en el registro
  updatedAt     DateTime   @updatedAt
  // Se necesita especificar el nombre de la relación si hay más de una relación entre dos modelos
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("FavoritedPosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categories    Category[]
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  BASIC
  ADMIN
}
